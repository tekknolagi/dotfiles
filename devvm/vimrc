"to reload:
":so ~/.vimrc

" set encoding=utf-8
" set termencoding=utf-8

set nocp
"source /Users/max/.vim/autoload/pathogen.vim
"runtime /Users/max/.vim/bundle/pathogen/autoload/pathogen.vim

execute pathogen#infect()
syntax on
"set mouse=nicr
filetype plugin indent on
set number
" shows relative line numbers
"set relativenumber
set background=dark
" let g:solarized_termcolors=256
" let g:solarized_visibility="high"
" let g:solarized_contrast="high"
" let g:solarized_termtrans=1
" colorscheme solarized
colorscheme gruvbox
" let g:Powerline_symbols = "fancy"
set backspace=2

" show existing tab with 4 spaces width
set tabstop=2
" when indenting with '>', use 4 spaces width
set shiftwidth=2
" On pressing tab, insert 4 spaces
set expandtab

" difference between maps
" http://stackoverflow.com/questions/3776117/what-is-the-difference-between-the-remap-noremap-nnoremap-and-vnoremap-mapping

" format entire file and go back to previous cursor position
map <F7> mzgg=G`z

" set vim window's current directory to that of file being edited
" autocmd BufEnter * silent! lcd %:p:h

" command to set current directory to file's directory
nnoremap ,cd :lcd %:p:h<CR>:pwd<CR>

"map x mx{gq}`x
"https://groups.google.com/forum/#!topic/vim_use/JDWnxE5EMwg
"http://blog.ezyang.com/2010/03/vim-textwidth/
"http://vim.wikia.com/wiki/Alternative_tab_navigation
" setlocal textwidth=79 formatoptions+=aw

"vim will remember where you left off in the file
set viminfo='10,\"100,:20,%,n~/.viminfo

" display the column number in the status bar
set rulerformat=r%l,c%v
set ruler

if g:colors_name == "solarized"
    " works for solarized:
    highlight ColorColumn ctermbg=235 guibg=#2c2d27
elseif g:colors_name == "gruvbox"
    " works for gruvbox:
    highlight ColorColumn ctermbg=237 guibg=#2c2d27
endif

" also highlight columns 120 and onward
let &colorcolumn="80,".join(range(120,999),",")

" disable auto commenting
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" auto-start nerdtree on vim startup
" autocmd vimenter * NERDTree
" Go to previous (last accessed) window (file, not NERDTree)
" autocmd VimEnter * wincmd p

" close vim if the only thing left open is nerdtree
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" use ag instead of ack if available on the system
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" change autocomplete options to be more normal
set wildmode=longest,list,full
set wildmenu

" use more natural split directions
set splitbelow
set splitright

" use C-p to search for files
set runtimepath^=~/.vim/bundle/ctrlp.vim

" make ctrlp faster by using git ls-files
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']

" use zo to open a fold
" use zc to close a fold
" use za to toggle a fold
" use zm to toggle folds of that level (?)

" use :buffer, :ls to manage buffers

" show buffer name even if only one window
" set laststatus=2

" use fzf in vim
set rtp+=/usr/local/opt/fzf

" store backups and swap files in a dedicated directory
set backupdir=~/.vim/backup//
set directory=~/.vim/swp//

set tw=79

autocmd FileType *.txt setlocal preserveindent smartindent

set lazyredraw

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

let g:easy_align_delimiters = {}
let g:easy_align_delimiters['d'] = {
            \ 'pattern': ' \ze\S\+\s*[;=]',
            \ 'left_margin': 0, 'right_margin': 0
            \ }

" "EasyAlign
" " Start interactive EasyAlign in visual mode (e.g. vipga)
" xmap ga <Plug>(EasyAlign)
" 
" " Start interactive EasyAlign for a motion/text object (e.g. gaip)
" nmap ga <Plug>(EasyAlign)<Paste>

" Show newlines and tabs as special chars
" set list
"set listchars=tab:â–¸\ ,eol:Â¬

" highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" jj instead of escape
inoremap jj <ESC>
vnoremap . :norm.<CR>

"window split movements
noremap <C-J> <C-W><C-J>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>

"tab commands
"nnoremap <C-S-tab> :tabprevious<CR>
"nnoremap <C-tab>   :tabnext<CR>
"nnoremap <C-t>     :tabnew<CR>
nnoremap <g-T>     :tabnext<CR>
nnoremap <g-t>     :tabprevious<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" add newline below in normal mode without going to insert mode
nmap <S-Enter> O<Esc>j
nmap <CR> o<Esc>

if has('nvim')
    set shada='10,"100,:20,%,n~/.config/nvim/shada
    tnoremap <Esc> <C-\><C-n>
    tnoremap jj <C-\><C-n>
endif

" italicize things
highlight Comment cterm=italic
set t_ZH=[3m
set t_ZR=[23m

" synastic config
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" add git to statusline
" set statusline+=%{fugitive#statusline()}

let g:syntastic_ignore_files = ['\m\c\.ml[ly]$']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" vim-better-sml config
au FileType sml setlocal conceallevel=2

set rtp+=~/.vim/runtime/ocp-indent-vim

" Align GitHub-flavored Markdown tables
au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

autocmd FileType ocaml setlocal shiftwidth=2 tabstop=2
autocmd FileType reason setlocal shiftwidth=2 tabstop=2

let g:jsx_ext_required = 0

set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

" to use SLIME:
" make screen session with screen -S SESSION_NAME -t WINDOW_NAME
" :SlimeConfig and set appropriate variables
" C-c C-c to send text (like vip)

" don't highlight after search
" set nohlsearch

set cursorline
" set cursorcolumn

" enable google calendar in calendar mode
let g:calendar_google_calendar = 1
let g:calendar_view = 'days'
let g:calendar_first_day = 'monday'

" load .vimrc from directory in which vim is opened
" set exrc

" au FileType commit-list0 nnoremap <buffer> Xx
"     \ :vert belowright split
"     \ |tag <cword>
"     \ |vert resize 130<cr>

imap <F5> <Esc>:w<CR>:!clear;./build310/python %<CR>
